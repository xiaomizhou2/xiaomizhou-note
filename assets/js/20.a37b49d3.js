(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{436:function(_,v,t){"use strict";t.r(v);var a=t(62),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"一、-软件退化的根源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、-软件退化的根源"}},[_._v("#")]),_._v(" 一、 软件退化的根源")]),_._v(" "),t("p",[_._v("软件退化的诱因：软件变更")]),_._v(" "),t("p",[_._v("要保持软件设计质量不退化，必须在每次需求变更的时候，对原有的程序结构适当地进行调整")]),_._v(" "),t("h6",{attrs:{id:"_1-开放-封闭原则-ocp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-开放-封闭原则-ocp"}},[_._v("#")]),_._v(" 1. 开放-封闭原则（OCP）")]),_._v(" "),t("ul",[t("li",[_._v("开放原则：对于功能扩展是开放的，即当系统需求发生变更时，可以对软件功能进行扩展，使其满足用户的新需求")]),_._v(" "),t("li",[_._v("封闭原则：对软件代码的修改是封闭的，即在修改软件的同时，不要影响到系统原有的功能，所以应当在不修改原有代码的基础上实现新的功能")])]),_._v(" "),t("h6",{attrs:{id:"_2-两顶帽子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-两顶帽子"}},[_._v("#")]),_._v(" 2. 两顶帽子")]),_._v(" "),t("ul",[t("li",[_._v("在不添加新功能的前提下，重构代码，调整原有程序结构，以适应新功能")]),_._v(" "),t("li",[_._v("实现新功能")])]),_._v(" "),t("h6",{attrs:{id:"_3-保持软件不退化的关键"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-保持软件不退化的关键"}},[_._v("#")]),_._v(" 3.保持软件不退化的关键")]),_._v(" "),t("p",[_._v("每次需求变更的设计，只能保证每次需求变更时做出正确的设计，才能保证软件以一种良性循环的方式不断维护下去")]),_._v(" "),t("h6",{attrs:{id:"_4-ddd思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-ddd思路"}},[_._v("#")]),_._v(" 4.DDD思路")]),_._v(" "),t("p",[_._v("在每次变更的时候，先回到领域模型，基于业务进行领域模型的变更")]),_._v(" "),t("h2",{attrs:{id:"二、运用ddd进行软件设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、运用ddd进行软件设计"}},[_._v("#")]),_._v(" 二、运用DDD进行软件设计")]),_._v(" "),t("p",[_._v("拿到新需求后，应当先进行需求分析，设计领域模型")]),_._v(" "),t("p",[_._v("单一职责原则：\n需要平时不断地整理代码，将因一个原因而变更的代码都放在一起，将因不同原因而变更的代码放在不同的模块、不同的类中")]),_._v(" "),t("h2",{attrs:{id:"三、ddd如何落地到数据库设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、ddd如何落地到数据库设计"}},[_._v("#")]),_._v(" 三、DDD如何落地到数据库设计")]),_._v(" "),t("p",[_._v("领域对象持久化")]),_._v(" "),t("ul",[t("li",[_._v("要插入一条记录就是创建一个领域对象")]),_._v(" "),t("li",[_._v("要更新一条记录就是根据key值去修改相应的领域对象")]),_._v(" "),t("li",[_._v("删除数据则是摧毁这个领域对象")])]),_._v(" "),t("p",[_._v("DDD的数据库设计变成了以领域模型为核心如何将领域模型转换成数据库设计的过程")]),_._v(" "),t("p",[t("strong",[_._v("继承关系第一种方案")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/zyx95ovo/pic-bed/raw/master/data/20210816150936.png",alt:"image"}})]),_._v(" "),t("ul",[t("li",[_._v("优点：简单，整个继承关系的数据全部保存在这个表里")]),_._v(" "),t("li",[_._v("缺点：造成“表稀疏” 也就是造成大量空字段")])]),_._v(" "),t("p",[t("strong",[_._v("继承关系第二种方案")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/zyx95ovo/pic-bed/raw/master/data/20210816151324.png",alt:"image"}})]),_._v(" "),t("p",[t("strong",[_._v("继承关系第三种方案")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/zyx95ovo/pic-bed/raw/master/data/20210816151549.png",alt:"image"}})]),_._v(" "),t("p",[t("strong",[_._v("关系性数据库与非关系型数据库的区别")])]),_._v(" "),t("ul",[t("li",[_._v("关系型数据库：遵循第三范式，使得数据库能够大幅度降低冗余，但数据库查询需要频繁使用join操作，在高并发场景性能低下")]),_._v(" "),t("li",[_._v("非关系型数据库：将需要join的查询在写入数据库表前先进行join操作，直接写到一张单表中进行分布式存储，这张表称为"),t("strong",[_._v("宽表")])])]),_._v(" "),t("p",[_._v("总结：\n从DDD落实到数据库设计的整个过程")]),_._v(" "),t("ul",[t("li",[_._v("传统的4种关系可以直接转换")]),_._v(" "),t("li",[_._v("继承关系有3种设计方案")]),_._v(" "),t("li",[_._v("转换成NoSQL数据库是完全不同的思路")])]),_._v(" "),t("h2",{attrs:{id:"四、领域模型指导程序设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、领域模型指导程序设计"}},[_._v("#")]),_._v(" 四、领域模型指导程序设计")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("服务")]),_._v(" "),t("p",[_._v("标识的是在领域对象之外的操作与行为，接受用户的请求和执行某些操作")])]),_._v(" "),t("li",[t("p",[_._v("实体")]),_._v(" "),t("p",[_._v("通过一个唯一标识字段来区分真实世界中的每一个个体的领域对象")])]),_._v(" "),t("li",[t("p",[_._v("值对象")]),_._v(" "),t("p",[_._v("代表的是真实世界中那些一成不变的、本质性的事物，这样的领域对象叫做"),t("strong",[_._v("值对象")])]),_._v(" "),t("p",[t("strong",[_._v("可变性是实体的特点，不变性是值对象的本质")])])])]),_._v(" "),t("p",[_._v("将业务领域模型转换为程序设计思路的两种模型：贫血模型和充血模型")]),_._v(" "),t("p",[_._v("所谓的贫血模型，就是在软件设计中，有很多的POJO对象，它们除了一堆get/set方法，几乎没有任何业务逻辑")]),_._v(" "),t("p",[_._v("所谓的充血模型，就是直接将领域模型的原貌转换为程序中领域对象的设计")]),_._v(" "),t("p",[_._v("充血模型的优点：")]),_._v(" "),t("ol",[t("li",[_._v("保持了领域模型的原貌，可以比较直接地映射成程序的变更，代码修改起来比较直接")]),_._v(" "),t("li",[_._v("保持了对象的封装性，使得领域模型在面临多态、继承等复杂结构时，易于变更")])]),_._v(" "),t("p",[_._v("贫血模型与充血模型的区别：")]),_._v(" "),t("ol",[t("li",[_._v("贫血模型比充血模型更加简单易行")]),_._v(" "),t("li",[_._v("充血模型需要具备更强的设计与协作能力")]),_._v(" "),t("li",[_._v("贫血模型更容易应对复杂的业务处理场景")])]),_._v(" "),t("p",[t("strong",[_._v("将需要封装的业务逻辑放到领域对象中，按照充血模型去设计，除此之外的其他业务逻辑放到service中，按照贫血模型去设计")])]),_._v(" "),t("p",[_._v("需要封装起来的业务逻辑：")]),_._v(" "),t("ol",[t("li",[_._v("在领域模型中出现了类似继承、多态的情况")]),_._v(" "),t("li",[_._v("在软件设计的过程中需要将一些类型或者编码进行转换")]),_._v(" "),t("li",[_._v("希望在软件设计中能更好地表现领域对象之间的关系")]),_._v(" "),t("li",[_._v("”聚合“，在真实世界中那些代表整体与部分的事物")])])])}),[],!1,null,null,null);v.default=s.exports}}]);